//Yohan Hernando González Gutiérrez - 6000615

<!DOCTYPE html>
<html lang="en-GB">

<head>
  <meta charset="utf-8" />
  <title>Figura de varios lados</title>
  <style>
    body {
      margin: 0;
    }
  </style>
</head>

<body>
  <script type="module">
    import * as THREE from 'https://sebastiann16.github.io/CompG/three.module.js';
    import { OrbitControls } from 'https://sebastiann16.github.io/CompG/OrbitControls.js';
    var WIDTH = window.innerWidth;
    var HEIGHT = window.innerHeight;

    var renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(WIDTH, HEIGHT);
    renderer.setClearColor(0xFCB0FF, 1);
    document.body.appendChild(renderer.domElement);

    var scene = new THREE.Scene();

    var camera = new THREE.PerspectiveCamera(70, WIDTH / HEIGHT);
    camera.position.z = 20;
    camera.position.y = 5;
    scene.add(camera);
    const light = new THREE.AmbientLight(0x00FFC8, 5);
    scene.add(light);

    //funcion para construir poligonos
    function poligono(n, R) {
      var angulo = (2 * Math.PI) / n;
      //vertices
      var vertices = [];
      for (let i = 0; i < n + 1; i++) {
        vertices[i] = [
          R * Math.cos(i * angulo),
          R * Math.sin(i * angulo),
        ];
      }
      return vertices;
    }

    //funcion para construir poliedro
    function construirPoliedro(n, R, h) {
      // Crear la geometría del poliedro
      var geometria = new THREE.BufferGeometry();

      // Obtener las coordenadas de los vértices en la base del poliedro
      var baseVertices = poligono(n, R);

      // Crear un array para almacenar los vértices
      var vertices = [];

      // Agregar los vértices a la matriz
      for (var i = 0; i < baseVertices.length; i++) {
        var x = baseVertices[i][0];
        var y = baseVertices[i][1];

        // Agregar los vértices de la base inferior
        vertices.push(x, y, 0);

        // Agregar los vértices de la base superior
        vertices.push(x, y, h);
      }

      // Convertir el array de vértices a un Float32Array
      var verticesArray = new Float32Array(vertices);

      // Definir los atributos de posición de la geometría
      geometria.setAttribute('position', new THREE.BufferAttribute(verticesArray, 3));

      // Crear las caras del poliedro
      var indices = [];
      for (var i = 0; i < n; i++) {
        var baseVerticeIndex = i * 2;
        var siguienteBaseVerticeIndex = ((i + 1) % n) * 2;
        var parteSuperiorVerticeIndex = baseVerticeIndex + 1;
        var siguienteParteSuperiorVerticeIndex = siguienteBaseVerticeIndex + 1;

        // Caras laterales
        indices.push(baseVerticeIndex, siguienteBaseVerticeIndex, parteSuperiorVerticeIndex);
        indices.push(siguienteBaseVerticeIndex, siguienteParteSuperiorVerticeIndex, parteSuperiorVerticeIndex);

        // Caras de la base inferior
        indices.push(baseVerticeIndex, siguienteBaseVerticeIndex, baseVerticeIndex + 2);

        // Caras de la base superior
        indices.push(parteSuperiorVerticeIndex, siguienteParteSuperiorVerticeIndex, parteSuperiorVerticeIndex + 2);
      }

      // Convertir el array de índices a un Uint32Array
      var indicesArray = new Uint32Array(indices);

      // Definir los atributos de índices de la geometría
      geometria.setIndex(new THREE.BufferAttribute(indicesArray, 1));

      // Calcular las normales de las caras para que se muestren correctamente
      geometria.computeVertexNormals();

      // Crear el material y el objeto de malla
      var material = new THREE.MeshBasicMaterial({ color: 0x4DFFB7 });
      var poliedro = new THREE.Mesh(geometria, material);

      // Devolver el poliedro
      return poliedro;
    }

    var poliedro = construirPoliedro(6, 1, 2);
    scene.add(poliedro);

    const controls = new OrbitControls(camera, renderer.domElement);
    const axesHelper = new THREE.AxesHelper(1000);
    scene.add(axesHelper);

    const size = 1000;
    const divisions = 1000;

    const gridHelper = new THREE.GridHelper(size, divisions);
    scene.add(gridHelper);

    function animate() {
      requestAnimationFrame(animate);
      controls.update();
      renderer.render(scene, camera);
    }
    animate();
  </script>
</body>

</html>

